/* automatically generated by rust-bindgen */

#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(non_snake_case)]
#![allow(dead_code)]

pub const IPC_CREAT: u32 = 512;
pub const IPC_EXCL: u32 = 1024;
pub const IPC_NOWAIT: u32 = 2048;
pub const IPC_RMID: u32 = 0;
pub const IPC_SET: u32 = 1;
pub const IPC_STAT: u32 = 2;
pub const IPC_R: u32 = 256;
pub const IPC_W: u32 = 128;
pub const IPC_M: u32 = 4096;
pub const SHM_RDONLY: u32 = 4096;
pub const SHM_RND: u32 = 8192;
pub const SHMLBA: u32 = 4096;
pub const SHM_R: u32 = 256;
pub const SHM_W: u32 = 128;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_ACCMODE: u32 = 3;
pub const O_NONBLOCK: u32 = 4;
pub const O_APPEND: u32 = 8;
pub const O_SYNC: u32 = 128;
pub const O_SHLOCK: u32 = 16;
pub const O_EXLOCK: u32 = 32;
pub const O_ASYNC: u32 = 64;
pub const O_FSYNC: u32 = 128;
pub const O_NOFOLLOW: u32 = 256;
pub const O_CREAT: u32 = 512;
pub const O_TRUNC: u32 = 1024;
pub const O_EXCL: u32 = 2048;
pub const O_EVTONLY: u32 = 32768;
pub const O_NOCTTY: u32 = 131072;
pub const O_DIRECTORY: u32 = 1048576;
pub const O_SYMLINK: u32 = 2097152;
pub const O_DSYNC: u32 = 4194304;
pub const O_CLOEXEC: u32 = 16777216;
pub const O_DP_GETRAWENCRYPTED: u32 = 1;
pub const O_DP_GETRAWUNENCRYPTED: u32 = 2;
pub const O_NDELAY: u32 = 4;
pub const S_IFMT: u32 = 61440;
pub const S_IFIFO: u32 = 4096;
pub const S_IFCHR: u32 = 8192;
pub const S_IFDIR: u32 = 16384;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_IFWHT: u32 = 57344;
pub const S_IRWXU: u32 = 448;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXG: u32 = 56;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXO: u32 = 7;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_ISTXT: u32 = 512;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const O_POPUP: u32 = 2147483648;
pub const O_ALERT: u32 = 536870912;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type uid_t = __darwin_uid_t;
pub type gid_t = __darwin_gid_t;
pub type mode_t = __darwin_mode_t;
pub type key_t = __int32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_perm {
  pub uid: uid_t,
  pub gid: gid_t,
  pub cuid: uid_t,
  pub cgid: gid_t,
  pub mode: mode_t,
  pub _seq: ::std::os::raw::c_ushort,
  pub _key: key_t,
}
#[test]
fn bindgen_test_layout_ipc_perm() {
  assert_eq!(
    ::std::mem::size_of::<ipc_perm>(),
    24usize,
    concat!("Size of: ", stringify!(ipc_perm))
  );
  assert_eq!(
    ::std::mem::align_of::<ipc_perm>(),
    4usize,
    concat!("Alignment of ", stringify!(ipc_perm))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<ipc_perm>())).uid as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(ipc_perm),
      "::",
      stringify!(uid)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<ipc_perm>())).gid as *const _ as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(ipc_perm),
      "::",
      stringify!(gid)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<ipc_perm>())).cuid as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(ipc_perm),
      "::",
      stringify!(cuid)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<ipc_perm>())).cgid as *const _ as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(ipc_perm),
      "::",
      stringify!(cgid)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<ipc_perm>())).mode as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(ipc_perm),
      "::",
      stringify!(mode)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<ipc_perm>()))._seq as *const _ as usize },
    18usize,
    concat!(
      "Offset of field: ",
      stringify!(ipc_perm),
      "::",
      stringify!(_seq)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<ipc_perm>()))._key as *const _ as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(ipc_perm),
      "::",
      stringify!(_key)
    )
  );
}
pub type pid_t = __darwin_pid_t;
pub type time_t = __darwin_time_t;
pub type size_t = __darwin_size_t;
pub type shmatt_t = ::std::os::raw::c_ushort;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __shmid_ds_new {
  pub shm_perm: ipc_perm,
  pub shm_segsz: size_t,
  pub shm_lpid: pid_t,
  pub shm_cpid: pid_t,
  pub shm_nattch: shmatt_t,
  pub shm_atime: time_t,
  pub shm_dtime: time_t,
  pub shm_ctime: time_t,
  pub shm_internal: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___shmid_ds_new() {
  assert_eq!(
    ::std::mem::size_of::<__shmid_ds_new>(),
    76usize,
    concat!("Size of: ", stringify!(__shmid_ds_new))
  );
  assert_eq!(
    ::std::mem::align_of::<__shmid_ds_new>(),
    4usize,
    concat!("Alignment of ", stringify!(__shmid_ds_new))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__shmid_ds_new>())).shm_perm as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__shmid_ds_new),
      "::",
      stringify!(shm_perm)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__shmid_ds_new>())).shm_segsz as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(__shmid_ds_new),
      "::",
      stringify!(shm_segsz)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__shmid_ds_new>())).shm_lpid as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(__shmid_ds_new),
      "::",
      stringify!(shm_lpid)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__shmid_ds_new>())).shm_cpid as *const _ as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(__shmid_ds_new),
      "::",
      stringify!(shm_cpid)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__shmid_ds_new>())).shm_nattch as *const _ as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(__shmid_ds_new),
      "::",
      stringify!(shm_nattch)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__shmid_ds_new>())).shm_atime as *const _ as usize },
    44usize,
    concat!(
      "Offset of field: ",
      stringify!(__shmid_ds_new),
      "::",
      stringify!(shm_atime)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__shmid_ds_new>())).shm_dtime as *const _ as usize },
    52usize,
    concat!(
      "Offset of field: ",
      stringify!(__shmid_ds_new),
      "::",
      stringify!(shm_dtime)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__shmid_ds_new>())).shm_ctime as *const _ as usize },
    60usize,
    concat!(
      "Offset of field: ",
      stringify!(__shmid_ds_new),
      "::",
      stringify!(shm_ctime)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__shmid_ds_new>())).shm_internal as *const _ as usize },
    68usize,
    concat!(
      "Offset of field: ",
      stringify!(__shmid_ds_new),
      "::",
      stringify!(shm_internal)
    )
  );
}
extern "C" {
  pub fn shmsys(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn shmat(
    arg1: ::std::os::raw::c_int,
    arg2: *const ::std::os::raw::c_void,
    arg3: ::std::os::raw::c_int,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn shmctl(
    arg1: ::std::os::raw::c_int,
    arg2: ::std::os::raw::c_int,
    arg3: *mut __shmid_ds_new,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn shmdt(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn shmget(arg1: key_t, arg2: size_t, arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
